---
title: "my_first_quarto"
author: "Helene B. Thomsen"
format: html
---
## My notes
- Opened quarto (cmd+shit+p and search for quarto)
- Table of content just for me (cmd+shit+p and search for outline)
- Insert code chunk (cmd+shit+p and search for chunk, "Insert a new chunk code")
- run line (ctrl + enter)
- Zenodo is also a place with free datasets
- To find help through console we can use "?geom_bar" to know something about geom_bar() function

## Setup code chunk
"setup" is the label and "setup" is special because it is decoted that this chunk should be run first
```{r setup}
library(tidyverse)
# option + minus = <-
# option + i = |

#| message: false # removes message output from file
#| warning: false # removes warnings from output file

# read_csv2 means to read semicolon seperated files like the python ,sep=;
data_post_meal <- read_csv2(here::here("data/post-meal-insulin.csv"))

data_post_meal_small <- select(data_post_meal, id, Age, BMI, Group, auc_pg, auc_ins, glykemi)


data_post_meal_small_tidier <- data_post_meal_small |>
  rename(
    auc_glucose = auc_pg,
    auc_insulin = auc_ins
  ) |>
  filter(glykemi == 0) |>
  select(-glykemi)

data_post_meal_small_tidied <- data_post_meal_small_tidier |>
  mutate(
    insulin_glucose_ratio = auc_insulin / auc_glucose,
    Group = if_else(Group == "CTR", "Control", "First-degree relative")
  )
```


## Showing the data
```{r}
data_post_meal
# glimpse(data_post_meal)
```

```{r}
#| fig-cap: "Distribution of BMI"
#| label: fig-bmi-hist
ggplot(data_post_meal, aes(x = BMI)) +
  geom_histogram()
```


```{r}
#| fig-cap: "Barplot: plotting one discrete variables"
#| label: fig-bmi-bar
ggplot(data_post_meal, aes(x = glykemi)) +
  geom_bar()
```

```{r}
# Group and glykemi are columns in the dataset
data_post_meal |>
  ggplot(aes(x = Group, fill = glykemi)) +
  geom_bar()
```
```{r}
# fixing abovementioned issue using as.charachter
data_post_meal |>
  ggplot(aes(x = Group, fill = as.character(glykemi))) +
  geom_bar()
```


```{r}
# position_dodge() is used for seperating the two columns
data_post_meal |>
  ggplot(aes(x = Group, fill = as.character(glykemi))) +
  geom_bar(position = position_dodge())
```


## putting two plots side by side

```{r side-by-side-figs}
#| fig-cap: "BMI and glycemia, side by side plots"
#| label: fig-bmi-glycemi
#| fig-subcap:
#| - "Distribution of BMI"
#| - "Number of hyperglycemic participants"
#| layout-ncol: 2

ggplot(data_post_meal, aes(x = BMI)) +
  geom_histogram()

ggplot(data_post_meal, aes(x = glykemi)) +
  geom_bar()
```

geom_point()
geom_point()
geom_smooth()

## plotting two continuous variables
```{r}
#| fig-cap: "BMI agains auc of blood glucose"
#| label: fig-two-continuous-varialbes
ggplot(data_post_meal, aes(x = BMI, y = auc_pg)) +
  geom_point() +
  geom_smooth()
```

## Pushing changes to remote
## pulling changes locally

## Data wrangling
### selecting data
```{r}
select(data_post_meal, Age, "BMI", Weight) # selecting columns

select(data_post_meal, -Group) # removing the group column

select(data_post_meal, starts_with("PG")) # all variables that start with PG has now been selected. We have not assigned this to anything yet.
select(data_post_meal, ends_with("DXA"))

select(data_post_meal, contains("0"))
```

## renaming columns
```{r}
data_post_meal_small |>
  rename(
    auc_glucose = auc_pg,
    auc_insulin = auc_ins
  )
```



## excercise 11.6
### select and rename task
```{r}
# Task 1.
data_post_meal |>
  select(contains("OGTT"))
# 13 columns


# Task 2.
data_post_meal |>
  select(contains("..", -contains("..."))) |>
  rename(Insulin_minus_5_OGTT = Insulin..5.OGTT.X) |>
  rename(P_Glucose_minus_5_OGTT = P.Glucose..5.OGTT)
# post_meal_data |>
#   ___(
#     ___ = ___,
#     ___ = ___
#   )
#
# # Task 3.
# basic_info <- select(post_meal_data, id, BMI, Length, Weight, Age)
# rename(basic_info, Height = Length)
```

## filtering data by row
```{r}
data_post_meal_small |>
  filter(glykemi == 1)

data_post_meal_small |>
  filter(BMI >= 25)

data_post_meal_small |>
  filter(Group == "CTR")
```

```{r}
data_post_meal_small |>
  filter(Group == "CTR", BMI >= 25) # both "," and "&" means AND
data_post_meal_small |>
  filter(Group == "CTR" & BMI >= 25)

data_post_meal_small |>
  filter(Group == "CTR" | BMI >= 25)
```



```{r}
data_post_meal_small_tidier <- data_post_meal_small |>
  rename(
    auc_glucose = auc_pg,
    auc_insulin = auc_ins
  ) |>
  filter(glykemi == 0) |>
  select(-glykemi)
```


# Day 3
## Modify or add column
```{r}
data_post_meal_small_tidier |>
  mutate(
    insulin_glucose_ratio = auc_insulin / auc_glucose,
    Group = if_else(Group == "CTR", "Control", "First-degree relative")
  )
```

## task 11.9
Use filter() to find how many participants have a BMI of more than or equal to 20 and less than or equal to 40, and are in the “FDR” Group. How many are there?

Create a percent_body_fat column with mutate() by dividing the Fat.mass.DXA by the Weight, then multiplying by 100. Hint: In R, use * to multiply and / to divide. Then pipe to filter() to find out how many participants have a percent_body_fat greater than 30.

# post_meal_data |>
#   ___(___ >= ___ & ___ <= ___ & ___ == ___)
# 
# # Task 2.
# post_meal_data |>
#   ___(
#     ___ = (___ / ___) * 100
#   ) |> 
#   ___(___ > ___)
```{r}
# Task 1.
data_post_meal |>
  filter(BMI >= 20 & BMI <= 40 & Group == "FDR") # 16 rows so 16 people unless tidier dataset, then it is 15

# task 2

data_post_meal |>
  mutate(percent_body_fat = ((Fat.mass.DXA / Weight) * 100)) |>
  filter(percent_body_fat > 30)
```



## Visualising with jitter plot

```{r}
data_post_meal_small_tidied |>
  mutate(overweight = if_else(BMI >= 25, "overweight", "Not overweight")) |>
  ggplot(aes(x = overweight, y = insulin_glucose_ratio)) +
  geom_jitter()
```


## Plotting three or more columns
```{r}
data_post_meal_small_tidied |>
  filter(BMI < 30) |>
  ggplot(aes(x = Age, y = auc_insulin, colour = Group, )) +
  geom_point()
```

```{r}
data_post_meal_small_tidied |>
  filter(BMI < 30) |>
  mutate(young = if_else(Age < 40, "Young", "Old")) |>
  ggplot(aes(x = BMI, y = insulin_glucose_ratio, colour = Group)) +
  geom_point() +
  facet_grid(rows = vars(young)) +
  labs(
    x = "Body Mass Index (BMI) [kg/m^2]",
    y = "Insulin to Glucose ratio"
  )
```
# Exercise 12.4
## Make multi-dimensional plots!
```{r}
#| label: fig-multidimensional
#| fig-cap: "Two, mult-dimensional plots of our data."
#| fig-subcap:
#|   - "Distribution of percent body fat by group and age category."
#|   - "Relationship between BMI and bone mineral density, split by insulin sensitivity."
#| layout-ncol: 2

data_post_meal |>
  mutate(
    percent_body_fat = Fat.mass.DXA / Weight * 100,
    young = if_else(BMI <= 40, "Young", "Old")
  ) |>
  ggplot(aes(x = Group, y = percent_body_fat, colour(young))) +
  geom_jitter(width = 0.2) # width is to make the points cluster a bit more together

# task 2
data_post_meal |>
  mutate(
    insulin_glucose_ratio = (auc_ins / auc_pg),
    insulin_insensitive = if_else(insulin_glucose_ratio > mean(insulin_glucose_ratio), "Insensitive", "Sensitive")
  ) |>
  ggplot(aes(x = BMI, y = Bone.mineral.DXA, colour(insulin_insensitive))) +
  geom_point() +
  geom_smooth() +
  facet_grid(cols = vars(insulin_insensitive))
```

# Exercise 12.6
## changing colours



```{r}
# Tasks 1. and 2.
data_post_meal |>
  mutate(hyperglycemia = if_else(glykemi == 1, "Yes", "No")) |>
  ggplot(aes(x = Group, fill = hyperglycemia)) +
  geom_bar(position = position_dodge()) +
  geom_bar(position = position_dodge()) +
  scale_fill_viridis_d(option = "cividis") # other options: cividis, magma

# Tasks 3. and 4.
data_post_meal |>
  ggplot(aes(x = auc_pg, y = auc_ins, colour = BMI)) +
  geom_point() +
  # scale_fill_viridis_c() # d for discrete and c for continuous in the function name
  scale_colour_viridis_c(option = "inferno")
```




## calculating summary statistics

```{r}
data_post_meal_small_tidied |>
  summarise(
    max_bmi = max(BMI),
    min_bmi = min(BMI)
  )
```


## summarize with split

```{r}
data_post_meal_small_tidied |>
  group_by(Group) |>
  summarise(
    mean_age = mean(Age),
    mean_bmi = mean(BMI)
  ) |>
  ungroup()
```
